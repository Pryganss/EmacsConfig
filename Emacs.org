#+Emacs Config
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Package System Setup
** Use Package

#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

#+RESULTS:
: t

** Try

#+begin_src emacs-lisp

  (use-package try)
  
#+end_src 

* UI Config
** Simplify

#+begin_src emacs-lisp 

  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
  (add-hook 'window-setup-hook 'toggle-frame-maximized t)

#+end_src

#+RESULTS:
| doom-modeline-refresh-font-width-cache | toggle-frame-maximized |

** Font

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :height 100)
  
#+end_src

#+RESULTS:

** All the Icons

#+begin_src emacs-lisp

  (use-package all-the-icons
    :if (display-graphic-p))

#+end_src

#+RESULTS:

** Themes

#+begin_src emacs-lisp

  (use-package uwu-theme)
  (use-package doom-themes)
  (use-package kaolin-themes)
  (use-package tangotango-theme)
  (use-package mood-one-theme)

  (load-theme 'mood-one t t)
  (enable-theme 'mood-one)

#+end_src

** Doom Mode Line

#+begin_src emacs-lisp

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
  
#+end_src

** Rainbow Delimiters 

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  
#+end_src

* Ivy

#+begin_src emacs-lisp

  (use-package ivy
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done))
    :config
    (ivy-mode 1))

#+end_src

* Org Mode
** Setup

#+begin_src emacs-lisp

  (use-package org
    :hook (org-mode . pry/org-mode-setup)
    :config
    (setq org-ellipsis " ⌄"
          org-hide-emphasis-markers t)

    (setq org-agenda-files
          '("~/.emacs.d/OrgFiles/Tasks.org"
            "~/.emacs.d/OrgFiles/Habits.org"))

    (setq org-agenda-skip-scheduled-if-done t)

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-refile-targets
          '(("Archive.org" :maxlevel . 1)
            ("Tasks.org" :maxlevel . 1)))

    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-todo-keywords
          '((sequence "TODO(t)"  "WAIT(w@/!)" "NEXT(n)" "|" "DONE(d)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))

            ("W" "School Tasks" tags-todo "+school")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))

    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/.emacs.d/OrgFiles/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/.emacs.d/OrgFiles/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"

             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Notes" entry
             (file+olp+datetree "~/.emacs.d/OrgFiles/Journal.org")
             "* %<%I:%M %p> - %a :notes:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1))))

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("C++" . "src Cpp"))


  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("●" "○" "●" "○" "●" "○" "●"))) 


  (defun pry/org-mode-visual-fill ()
    (setq visual-fill-column-width 200
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . pry/org-mode-visual-fill))

  (add-hook 'org-mode-hook
            (lambda () (face-remap-add-relative 'default :family "DejaVu Sans Mono")))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (C . t)))

  (setq org-confirm-babel-evaluate nil)
  
  (defun pry/org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1))

#+end_src

** Auto-tangle Config Files

#+begin_src emacs-lisp

  (defun pry/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'pry/org-babel-tangle-config)))

#+end_src

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'pry/org-babel-tangle-config)) | (lambda nil (face-remap-add-relative 'default :family DejaVu Sans Mono)) | pry/org-mode-visual-fill | org-bullets-mode | org-tempo-setup | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | pry/org-mode-setup |
* Evil
** Mode Hooks

#+begin_src emacs-lisp

  (defun pry/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    sauron-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode))) 

#+end_src

** Install and Keybindings

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :hook (evil-mode . pry/evil-hook)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (define-key evil-insert-state-map (kbd "C-p") 'evil-previous-visual-line)
    (define-key evil-insert-state-map (kbd "C-n") 'evil-next-visual-line)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (evil-mode 1)

#+end_src

** Evil collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Git
** Magit

#+begin_src emacs-lisp

  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

** Forge

#+begin_src emacs-lisp

  (use-package forge
    :after magit) 

#+end_src

* Misc.
** Command Log Mode

#+begin_src emacs-lisp

  (use-package command-log-mode)
  (global-command-log-mode)

#+end_src

** Ace Jump Mode

#+begin_src emacs-lisp

  (use-package ace-jump-mode)
  (define-key global-map (kbd "M-s") 'ace-jump-mode)
  
#+end_src

** Smart parens

#+begin_src emacs-lisp

  (use-package smartparens)
  (require 'smartparens-config)
  (smartparens-global-mode 1)

#+end_src

** Auto Complete

#+begin_src emacs-lisp

  (use-package auto-complete)
  (global-auto-complete-mode)
  
#+end_src

** Helpful

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (describe-function-function #'helpful-callable)
    (describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

** Ace Window

#+begin_src emacs-lisp

  (use-package ace-window)
  (global-set-key (kbd "C-x o") 'ace-window)
  
#+end_src

** Smart Semicolon

#+begin_src emacs-lisp

  (use-package smart-semicolon)
  (add-hook 'prog-mode #'smart-semicolon-mode)

#+end_src

** Lorem Ipsum

#+begin_src emacs-lisp

  (use-package lorem-ipsum)
  (lorem-ipsum-use-default-bindings)
  
#+end_src


* Keybinds
** General

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup t)
    (general-auto-unbind-keys)

    (general-create-definer pry/leader-keys
      :keymaps '(normal insert visual)
      :global-prefix "C-<tab>")

    (pry/leader-keys
      "t" '(:ignore t :which-key "toggles")
      "tt" '(load-theme :which-key "choose theme")
      "o" '(:ignore t :which-key "org commands")
      "oa" '(org-agenda :which-key "agenda menu")
      "ot" '(org-babel-tangle :which-key "tangle")
      "m" '(:ignore t :which-key "magit commands")
      "ms" '(magit-status :which-key "magit status"))

    (pry/leader-keys "ts" '(hydra-text-scale/body :which-key "scale text"))
    (pry/leader-keys "tw" '(hydra-resize-window/body :which-key "resize window")))

#+end_src

** Hydra

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale ()
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("q" nil "quit" :exit t))

  (defhydra hydra-resize-window ()
    "resize window"
    ("l" enlarge-window-horizontally "enlarge vertical")
    ("h" shrink-window-horizontally "shrink vertical")
    ("j" enlarge-window "enlarge horizontal")
    ("k" shrink-window "shrink horizontal")
    ("q" nil "quit" :exit t))

#+end_src

** Escape as quit key (sometimes :/ )

#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  
#+end_src

** Disable Mouse 

#+begin_src emacs-lisp
  
  (use-package disable-mouse)
  (global-disable-mouse-mode)
  (mapc #'disable-mouse-in-keymap
        (list evil-motion-state-map
              evil-normal-state-map
              evil-visual-state-map
              evil-insert-state-map))

#+end_src

** Which Key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key mode
    :config
    (setq which-key-idle-delay 0.3))

#+end_src

